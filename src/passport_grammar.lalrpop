use crate::passport::{Entry, LenUnit};

grammar;


//pub Lines = Line*;
//EntrySimple = <NonSpace>":"<NonSpace>;
//pub PassportSimple = EntrySimple*;


pub Passport = Entry*;
Entry : Entry = {
    "byr"":"<e:BYr> => Entry::BYr(e) ,
    "iyr"":"<e:IYr> => Entry::IYr(e),
    "eyr"":"<e:EYr> => Entry::EYr(e),
    "hgt"":"<e:Hgt> => Entry::Hgt(e.0, e.1),
    "hcl"":"Hcl => Entry::Hcl,
    "ecl"":"Ecl => Entry::Ecl,
    "pid"":"Pid => Entry::Pid,
    "cid"":"Cid => Entry::Cid,
}

BYr = Num4;
IYr = Num4;
EYr = Num4;
Hgt = Num3 LenUnit;

Hcl = "#"Hex6;
Ecl = {
    "amb", "blu", "brn", "gry", "grn", "hzl", "oth"
}
Pid = Num9;
Cid = Num3;

LenUnit : LenUnit = {
    "cm" => LenUnit::Cm,
    "in" => LenUnit::In,
}

Num4 : i64 = <n:r"\d{4}"> => n.parse().unwrap();
//Num2 : i64 = <n:r"\d{2}"> => n.parse().unwrap();
Num3 : i64 = <n:r"\d{2,3}"> => n.parse().unwrap();
Num9 : i64 = <n:r"\d{9}"> => n.parse().unwrap();
Hex6 : String = <s:r"[0-9a-f]{6}"> => String::from(s);
 //: i64 = <n:r"\d\d\d\d"> => n.parse().unwrap()

//    byr (Birth Year) - four digits; at least 1920 and at most 2002.
//    iyr (Issue Year) - four digits; at least 2010 and at most 2020.
//    eyr (Expiration Year) - four digits; at least 2020 and at most 2030.
//    hgt (Height) - a number followed by either cm or in:
//        If cm, the number must be at least 150 and at most 193.
//        If in, the number must be at least 59 and at most 76.
//    hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.
//    ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.
//    pid (Passport ID) - a nine-digit number, including leading zeroes.
//    cid (Country ID) - ignored, missing or not.



//NonSpace: String = <s:r"[a-zA-Z0-9#]+"> => String::from(s);
//NumDec: i64 = <n:r"[0-9]+"> => n.parse().unwrap();
//Char: Char = <c:r"[a-z]"> => c.parse().unwrap();